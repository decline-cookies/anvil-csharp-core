# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  windows: circleci/windows@2.4.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  # build-logging:
  #   # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
  #   # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
  #   # Be sure to update the tag on this image to a more stable version, using latest can result in unstable builds.
  #   executor:
  #     name: windows/default
  #     size: medium
  #     shell: powershell.exe
  #   # Add steps to the job
  #   # See: https://circleci.com/docs/2.0/configuration-reference/#steps
  #   steps:
  #     # - run: apt-get update && apt-get install -y openssh-client git
  #     - checkout
  #     # Then simply use the dotnet container as you'd expect and run your tests
  #     - run:
  #         # Update this line with the directory that contains your tests project file
  #         working_directory: ~/project/Logging/.CSProject/
  #         name: Build
  #         command: |
  #           dotnet build Anvil.CSharp.Logging.sln

  build-logging:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    # Be sure to update the tag on this image to a more stable version, using latest can result in unstable builds.
    docker:
      - image: mono:latest
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - run: apt-get update && apt-get install -y openssh-client git
      - checkout
      # Then simply use the dotnet container as you'd expect and run your tests
      - run:
          # Update this line with the directory that contains your tests project file
          working_directory: ~/project/Logging/.CSProject/
          name: Build
          command: |
            xbuild Anvil.CSharp.Logging.sln

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-logging
